"use strict";(self.webpackChunkstudent_to_software_engineer=self.webpackChunkstudent_to_software_engineer||[]).push([[4846],{3090:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"technical-skill-roadmap/production-ready-applications/relational-database-design","title":"5.3.4. Relational Database Design","description":"At some point, your programs will need to store data\u2014user profiles, messages, products, posts, whatever. When that time comes, you\u2019ll need a database.","source":"@site/docs/5-technical-skill-roadmap/3-production-ready-applications/4-relational-database-design.md","sourceDirName":"5-technical-skill-roadmap/3-production-ready-applications","slug":"/technical-skill-roadmap/production-ready-applications/relational-database-design","permalink":"/docs/technical-skill-roadmap/production-ready-applications/relational-database-design","draft":false,"unlisted":false,"editUrl":"https://github.com/student-to-software-engineer/student-to-software-engineer/edit/master/docs/5-technical-skill-roadmap/3-production-ready-applications/4-relational-database-design.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.3.3. OOP Design Patterns","permalink":"/docs/technical-skill-roadmap/production-ready-applications/oop-design-patterns"},"next":{"title":"5.3.5. MVC Web Frameworks","permalink":"/docs/technical-skill-roadmap/production-ready-applications/mvc-frameworks"}}');var i=n(4848),t=n(8453);const r={},l="5.3.4. Relational Database Design",o={},d=[{value:"What Is a Relational Database?",id:"what-is-a-relational-database",level:2},{value:"Keys and Relationships",id:"keys-and-relationships",level:2},{value:"Normalization: Don&#39;t Repeat Yourself (DRY)",id:"normalization-dont-repeat-yourself-dry",level:2},{value:"Querying with SQL",id:"querying-with-sql",level:2},{value:"Visualizing Relationships: ERD Diagrams",id:"visualizing-relationships-erd-diagrams",level:2}];function c(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"534-relational-database-design",children:"5.3.4. Relational Database Design"})}),"\n",(0,i.jsx)(s.p,{children:"At some point, your programs will need to store data\u2014user profiles, messages, products, posts, whatever. When that time comes, you\u2019ll need a database."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Relational databases"})," are the most widely used type of database in software development. They\u2019re fast, reliable, and designed to handle structured data with complex relationships."]}),"\n",(0,i.jsx)(s.p,{children:"If you\u2019ve used apps like Instagram or Spotify, you\u2019ve interacted with a relational database\u2014behind the scenes, every user, playlist, or comment is a row in a table."}),"\n",(0,i.jsx)(s.h2,{id:"what-is-a-relational-database",children:"What Is a Relational Database?"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.strong,{children:"relational database"})," stores data in ",(0,i.jsx)(s.strong,{children:"tables"}),", where each table represents a type of entity (e.g., users, posts, orders). Each ",(0,i.jsx)(s.strong,{children:"row"})," in a table is a record, and each ",(0,i.jsx)(s.strong,{children:"column"})," represents a field."]}),"\n",(0,i.jsxs)(s.p,{children:["It\u2019s called \u201crelational\u201d because these tables can be connected\u2014or ",(0,i.jsx)(s.em,{children:"related"}),"\u2014to each other through ",(0,i.jsx)(s.strong,{children:"keys"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"For example:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.code,{children:"users"})," table stores all users."]}),"\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.code,{children:"posts"})," table stores all posts."]}),"\n",(0,i.jsxs)(s.li,{children:["Each post has a ",(0,i.jsx)(s.code,{children:"user_id"})," column that links it to the user who created it."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["This relationship between ",(0,i.jsx)(s.code,{children:"users.id"})," and ",(0,i.jsx)(s.code,{children:"posts.user_id"})," is the backbone of relational design."]}),"\n",(0,i.jsx)(s.h2,{id:"keys-and-relationships",children:"Keys and Relationships"}),"\n",(0,i.jsx)(s.p,{children:"Here are some important terms you need to know:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Primary Key"}),": A unique identifier for each row in a table (usually called ",(0,i.jsx)(s.code,{children:"id"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Foreign Key"}),": A reference to a primary key in another table."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"One-to-Many"}),": One user can have many posts."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Many-to-Many"}),": One student can enroll in many courses, and each course can have many students (requires a join table like ",(0,i.jsx)(s.code,{children:"enrollments"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Good relational design is about ",(0,i.jsx)(s.strong,{children:"breaking your data into logical pieces"}),", then ",(0,i.jsx)(s.strong,{children:"connecting them with keys"})," so that you can efficiently query across them."]}),"\n",(0,i.jsx)(s.h2,{id:"normalization-dont-repeat-yourself-dry",children:"Normalization: Don't Repeat Yourself (DRY)"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Normalization"})," is the process of organizing your database to reduce duplication and improve integrity."]}),"\n",(0,i.jsxs)(s.p,{children:["For example, instead of storing a user\u2019s name next to every post they write, you store the name in the ",(0,i.jsx)(s.code,{children:"users"})," table and link each post to the user via ",(0,i.jsx)(s.code,{children:"user_id"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"This way:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"You save space"}),"\n",(0,i.jsx)(s.li,{children:"You avoid inconsistency"}),"\n",(0,i.jsx)(s.li,{children:"You only need to update the name in one place"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["The rule of thumb: ",(0,i.jsx)(s.strong,{children:"store data once, reference it everywhere else."})]}),"\n",(0,i.jsx)(s.h2,{id:"querying-with-sql",children:"Querying with SQL"}),"\n",(0,i.jsxs)(s.p,{children:["Most relational databases (like PostgreSQL, MySQL, and SQLite) use ",(0,i.jsx)(s.strong,{children:"SQL"})," (Structured Query Language) to read and write data."]}),"\n",(0,i.jsx)(s.p,{children:"Example: Getting all posts written by a specific user."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM posts\nWHERE user_id = 42;\n"})}),"\n",(0,i.jsx)(s.p,{children:"SQL lets you filter, sort, group, join, and update data\u2014it's one of the most useful tools you can learn as a developer."}),"\n",(0,i.jsx)(s.h2,{id:"visualizing-relationships-erd-diagrams",children:"Visualizing Relationships: ERD Diagrams"}),"\n",(0,i.jsxs)(s.p,{children:["When designing a database, it helps to sketch out your tables and how they relate to each other. That\u2019s where an ",(0,i.jsx)(s.strong,{children:"Entity-Relationship Diagram (ERD)"})," comes in."]}),"\n",(0,i.jsxs)(s.p,{children:["An ",(0,i.jsx)(s.strong,{children:"ERD"})," is a visual representation of your database schema. It shows:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Entities"})," (usually tables, like ",(0,i.jsx)(s.code,{children:"users"})," or ",(0,i.jsx)(s.code,{children:"posts"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Attributes"})," (the columns in each table, like ",(0,i.jsx)(s.code,{children:"id"}),", ",(0,i.jsx)(s.code,{children:"name"}),", or ",(0,i.jsx)(s.code,{children:"email"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Relationships"}),' between entities (e.g., a user "has many" posts)']}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Here\u2019s a simplified example:"}),"\n",(0,i.jsx)(s.mermaid,{value:'erDiagram\n    USERS {\n        int id PK\n        string username\n        string email\n    }\n    POSTS {\n        int id PK\n        string title\n        string content\n        int user_id FK\n    }\n    USERS ||--o{ POSTS : "has"'}),"\n",(0,i.jsx)(s.p,{children:"This tells us:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Each post belongs to one user"}),"\n",(0,i.jsx)(s.li,{children:"Each user can have many posts"}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"user_id"})," in the ",(0,i.jsx)(s.code,{children:"Posts"})," table links to ",(0,i.jsx)(s.code,{children:"id"})," in the ",(0,i.jsx)(s.code,{children:"Users"})," table"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var a=n(6540);const i={},t=a.createContext(i);function r(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);