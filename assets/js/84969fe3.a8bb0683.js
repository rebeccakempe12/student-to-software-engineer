"use strict";(self.webpackChunkstudent_to_software_engineer=self.webpackChunkstudent_to_software_engineer||[]).push([[2059],{335:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"technical-skill-roadmap/programming-fundementals/object-oriented-programming","title":"5.1.6. Object-Oriented Programming","description":"Object-Oriented Programming (OOP) is one of the most widely used programming models \u2014 especially in large applications and enterprise software. It\u2019s popular because it often maps well to real-world scenarios, making it easier to design systems that are organized, modular, and reusable.","source":"@site/docs/5-technical-skill-roadmap/1-programming-fundementals/6-object-oriented-programming.md","sourceDirName":"5-technical-skill-roadmap/1-programming-fundementals","slug":"/technical-skill-roadmap/programming-fundementals/object-oriented-programming","permalink":"/docs/technical-skill-roadmap/programming-fundementals/object-oriented-programming","draft":false,"unlisted":false,"editUrl":"https://github.com/student-to-software-engineer/student-to-software-engineer/edit/master/docs/5-technical-skill-roadmap/1-programming-fundementals/6-object-oriented-programming.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.1.5. Dependencies","permalink":"/docs/technical-skill-roadmap/programming-fundementals/dependencies"},"next":{"title":"5.1.7. Pointers and Memory Management","permalink":"/docs/technical-skill-roadmap/programming-fundementals/pointers-and-memory-management"}}');var t=s(4848),i=s(8453);const r={},o="5.1.6. Object-Oriented Programming",l={},c=[{value:"What Is an Object?",id:"what-is-an-object",level:2},{value:"Core Concepts of OOP",id:"core-concepts-of-oop",level:2},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Abstraction",id:"abstraction",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Benefits of OOP",id:"benefits-of-oop",level:2},{value:"Knowledge Checklist",id:"knowledge-checklist",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"516-object-oriented-programming",children:"5.1.6. Object-Oriented Programming"})}),"\n",(0,t.jsx)(n.p,{children:"Object-Oriented Programming (OOP) is one of the most widely used programming models \u2014 especially in large applications and enterprise software. It\u2019s popular because it often maps well to real-world scenarios, making it easier to design systems that are organized, modular, and reusable."}),"\n",(0,t.jsxs)(n.p,{children:["Instead of writing one long list of instructions (called ",(0,t.jsx)(n.em,{children:"procedural programming"}),"), OOP encourages you to group related data and behavior into ",(0,t.jsx)(n.em,{children:"objects"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-an-object",children:"What Is an Object?"}),"\n",(0,t.jsxs)(n.p,{children:["An object is a combination of ",(0,t.jsx)(n.strong,{children:"data"})," (attributes) also known as ",(0,t.jsx)(n.strong,{children:"state"})," and ",(0,t.jsx)(n.strong,{children:"functions"})," (methods) that operate on that data."]}),"\n",(0,t.jsx)(n.p,{children:"For example, you might represent a person like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print("Hi, I\'m " + self.name)\n\nperson = Person("Alice", 25)\nperson.greet()  # Output: Hi, I\'m Alice\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"Person"})," is a ",(0,t.jsx)(n.em,{children:"class"})," (a blueprint), and ",(0,t.jsx)(n.code,{children:"person"})," is an ",(0,t.jsx)(n.em,{children:"object"})," created from that class."]}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts-of-oop",children:"Core Concepts of OOP"}),"\n",(0,t.jsx)(n.p,{children:"There are four key ideas that make OOP powerful:"}),"\n",(0,t.jsx)(n.h3,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,t.jsx)(n.p,{children:"Keeping related data and behavior together inside an object, and hiding the internal details from the outside world."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # private variable\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(100)\naccount.deposit(50)\nprint(account.get_balance())  # Output: 150\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The internal balance is hidden (",(0,t.jsx)(n.code,{children:"__balance"}),") and can only be accessed through methods."]}),"\n",(0,t.jsx)(n.h3,{id:"abstraction",children:"Abstraction"}),"\n",(0,t.jsx)(n.p,{children:"Exposing only the necessary parts of an object\u2019s interface and hiding the rest. This makes complex systems easier to use."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    def start_engine(self):\n        print("Engine started")\n\n    def drive(self):\n        self.start_engine()\n        print("Car is moving")\n\nmy_car = Car()\nmy_car.drive()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You don\u2019t need to know how ",(0,t.jsx)(n.code,{children:"start_engine"})," works \u2014 you just call ",(0,t.jsx)(n.code,{children:"drive()"})," and the car moves."]}),"\n",(0,t.jsx)(n.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,t.jsx)(n.p,{children:"Allowing one class to \u201cinherit\u201d the behavior of another, so you can reuse and extend code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        print(self.name + " says hello.")\n\nclass Student(Person):\n    def study(self):\n        print(self.name + " is studying.")\n\ns = Student("Alice")\ns.speak()     # Inherited from Person\ns.study()     # Defined in Student\n'})}),"\n",(0,t.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,t.jsx)(n.p,{children:"Different objects can define their own versions of the same method, allowing flexible and interchangeable use."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Animal:\n    def make_sound(self):\n        print("Some generic sound")\n\nclass Dog(Animal):\n    def make_sound(self):\n        print("Woof!")\n\nclass Cat(Animal):\n    def make_sound(self):\n        print("Meow!")\n\nanimals = [Dog(), Cat()]\nfor animal in animals:\n    animal.make_sound()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Even though they\u2019re all ",(0,t.jsx)(n.code,{children:"Animal"})," objects, each one behaves differently depending on its type."]}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-oop",children:"Benefits of OOP"}),"\n",(0,t.jsx)(n.p,{children:"Compared to procedural programming, OOP has several advantages:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Organization"})," \u2014 Code is easier to read and maintain when it\u2019s grouped into logical units (objects)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reusability"})," \u2014 Once you define a class, you can create many instances and extend it without rewriting everything."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"})," \u2014 You can build systems in smaller, isolated parts that are easier to test and debug."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"})," \u2014 OOP makes it easier to manage larger codebases and collaborate on big projects."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"knowledge-checklist",children:"Knowledge Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","I understand what a class and object are."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","I know the difference between procedural and object-oriented programming."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","I can create a simple class with methods and properties."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","I understand the concepts of encapsulation, inheritance, and polymorphism."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","I see why OOP is useful for organizing and scaling larger projects."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var a=s(6540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);