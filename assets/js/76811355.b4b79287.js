"use strict";(self.webpackChunkstudent_to_software_engineer=self.webpackChunkstudent_to_software_engineer||[]).push([[4587],{5642:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"technical-skill-roadmap/essential-application-development/data-persistance","title":"5.2.3. Data Persistence","description":"Apps aren\u2019t very useful if they forget everything when you refresh the page. Data persistence is about storing information in a way that outlives a single session \u2014 like saving user accounts, blog posts, or todo list items.","source":"@site/docs/5-technical-skill-roadmap/2-essential-application-development/3-data-persistance.md","sourceDirName":"5-technical-skill-roadmap/2-essential-application-development","slug":"/technical-skill-roadmap/essential-application-development/data-persistance","permalink":"/docs/technical-skill-roadmap/essential-application-development/data-persistance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-technical-skill-roadmap/2-essential-application-development/3-data-persistance.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.2.2. Webservers and RESTful APIs","permalink":"/docs/technical-skill-roadmap/essential-application-development/rest-apis"},"next":{"title":"5.2.4. Deployment with PaaS","permalink":"/docs/technical-skill-roadmap/essential-application-development/deployment-with-paas"}}');var n=t(4848),i=t(8453);const l={},o="5.2.3. Data Persistence",r={},d=[{value:"Common Types of Databases",id:"common-types-of-databases",level:2},{value:"Simple Example (SQL)",id:"simple-example-sql",level:2},{value:"Connecting a Web App to a Database",id:"connecting-a-web-app-to-a-database",level:2},{value:"Knowledge Checklist",id:"knowledge-checklist",level:2}];function c(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"523-data-persistence",children:"5.2.3. Data Persistence"})}),"\n",(0,n.jsxs)(s.p,{children:["Apps aren\u2019t very useful if they forget everything when you refresh the page. ",(0,n.jsx)(s.em,{children:"Data persistence"})," is about storing information in a way that outlives a single session \u2014 like saving user accounts, blog posts, or todo list items."]}),"\n",(0,n.jsxs)(s.p,{children:["That\u2019s where ",(0,n.jsx)(s.strong,{children:"databases"})," come in."]}),"\n",(0,n.jsxs)(s.p,{children:["A database lets your application ",(0,n.jsx)(s.em,{children:"remember"})," things. You can store data, look it up later, update it, or delete it. Most beginner web apps use a database to handle Create, Read, Update, and Delete (CRUD) operations."]}),"\n",(0,n.jsx)(s.p,{children:"If you\u2019ve built a form on a website and saved the results \u2014 congratulations, you\u2019ve used data persistence."}),"\n",(0,n.jsx)(s.h2,{id:"common-types-of-databases",children:"Common Types of Databases"}),"\n",(0,n.jsx)(s.p,{children:"When you are starting out, you'll be told there are two main types of databases:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Relational databases"})," (e.g., SQLite, PostgreSQL, MySQL)","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Store data in ",(0,n.jsx)(s.strong,{children:"tables"}),", like a spreadsheet"]}),"\n",(0,n.jsxs)(s.li,{children:["Use ",(0,n.jsx)(s.strong,{children:"SQL"})," (Structured Query Language) to read/write data"]}),"\n",(0,n.jsxs)(s.li,{children:["Have relationships between rows (e.g., a ",(0,n.jsx)(s.code,{children:"users"})," table and a ",(0,n.jsx)(s.code,{children:"posts"})," table)"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"NoSQL databases"})," (e.g., MongoDB, Firebase)","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Store data as ",(0,n.jsx)(s.strong,{children:"documents"})," or ",(0,n.jsx)(s.strong,{children:"key-value pairs"})," (they're basically a huge hash map)"]}),"\n",(0,n.jsx)(s.li,{children:"More flexible, but less strict about structure"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"As a beginner, you\u2019ll probably use SQLite or MongoDB first."}),"\n",(0,n.jsx)(s.h2,{id:"simple-example-sql",children:"Simple Example (SQL)"}),"\n",(0,n.jsx)(s.p,{children:"Here\u2019s what saving and retrieving a todo might look like in SQL:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"-- Create a table\nCREATE TABLE todos (\n  id INTEGER PRIMARY KEY,\n  task TEXT,\n  completed BOOLEAN\n);\n\n-- Add a new task\nINSERT INTO todos (task, completed) VALUES ('Learn SQL', false);\n\n-- Get all tasks\nSELECT * FROM todos;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"connecting-a-web-app-to-a-database",children:"Connecting a Web App to a Database"}),"\n",(0,n.jsx)(s.p,{children:"Here\u2019s the simplest possible JavaScript code snippet to connect to an SQLite database using the sqlite3 package in Node.js:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'const sqlite3 = require("sqlite3");\n\n// Connect to (or create) a database file\nconst db = new sqlite3.Database("my-database.db");\n\n// Create a table\ndb.run(`CREATE TABLE IF NOT EXISTS todos (\n  id INTEGER PRIMARY KEY,\n  task TEXT,\n  completed BOOLEAN\n)`);\n\n// Insert a row\ndb.run(`INSERT INTO todos (task, completed) VALUES (?, ?)`, [\n  "Learn SQLite",\n  false,\n]);\n\n// Read rows\ndb.all(`SELECT * FROM todos`, (err, rows) => {\n  console.log(rows);\n});\n'})}),"\n",(0,n.jsx)(s.h2,{id:"knowledge-checklist",children:"Knowledge Checklist"}),"\n",(0,n.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I understand what data persistence means and why it's important."]}),"\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I\u2019ve used a database (like SQLite) to store and retrieve information."]}),"\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I can perform READ, CREATE, UPDATE, and DELETE (CRUD) with SQL"]}),"\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I understand the difference between relational and NoSQL databases."]}),"\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I can describe the concept of primary keys and relationships between tables."]}),"\n",(0,n.jsxs)(s.li,{className:"task-list-item",children:[(0,n.jsx)(s.input,{type:"checkbox",disabled:!0})," ","I\u2019ve connected a backend app to a database and queried it dynamically."]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>o});var a=t(6540);const n={},i=a.createContext(n);function l(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);